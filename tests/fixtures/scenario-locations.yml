global:
  default_inherits: default

tools:
  default:
    cores: 2
    mem: 8
    env: {}
    scheduling:
      require: []
      prefer:
          general
      accept:
      reject:
          offline
    rules: []
    rank: |
      from ruamel.yaml import YAML
      import pathlib
      from math import cos, asin, sqrt

      def distance(lat1, lon1, lat2, lon2):
        p = 0.017453292519943295
        hav = 0.5 - cos((lat2-lat1)*p)/2 + cos(lat1*p)*cos(lat2*p) * (1-cos((lon2-lon1)*p)) / 2
        return 12742 * asin(sqrt(hav))
   
      def closest(data, o):
        min_dist = 999999.99
        # closest_dest = str
        for p in data:
          d_lat = data[p]['latitude']
          d_lon = data[p]['longitude']
          dist = distance(o['latitude'],o['longitude'],d_lat,d_lon)
          # min_dist = dist
          # last_min_dist = min_dist
          # closest_dest = p
          print(p, dist)
          if dist < min_dist:
            min_dist = dist
            closest_dest = p
            print("closer",closest_dest, min_dist)
        return {closest_dest: min_dist}

      yaml=YAML(typ='safe')
      f1 = pathlib.Path("tests/fixtures/destinations_locations.yml")
      destination_locations = yaml.load(f1)
      f2 = pathlib.Path("tests/fixtures/object_store_locations.yml")
      object_store = yaml.load(f2)['object_store_australia']
      closest_dest = closest(destination_locations, object_store)
      print("closest_dest: ", closest_dest)
      print("candidate_destinations: ", candidate_destinations)
      # candidate_destinations.get(list(closest_dest.keys())[0])
      final_destinations = list(closest_dest.keys())
      final_destinations
  trinity:
    cores: 2
    mem: cores * 4
    env: {}
    scheduling:
      require: []
      prefer:
        - pulsar
      accept:
      reject:
        - offline


roles:
  ga_admins:
    scheduling:
      require:
        []


destinations:
  pulsar_italy:
    runner: general_pulsar_1
    max_accepted_cores: 8
    max_accepted_mem: 32
    scheduling:
      accept:
        - general
      require:
        - pulsar
  slurm_poland:
    runner: slurm
    max_accepted_cores: 16
    max_accepted_mem: 64
    scheduling:
      accept:
        - slurm
  condor_belgium:
    runner: condor
    max_accepted_cores: 16
    max_accepted_mem: 64
    scheduling:
      accept:
        - condor
  slurm_germany:
    runner: slurm
    max_accepted_cores: 16
    max_accepted_mem: 64
    scheduling:
      accept:
        - slurm
  condor_france:
    runner: condor
    max_accepted_cores: 16
    max_accepted_mem: 64
    scheduling:
      accept:
        - condor
  pulsar_australia:
    runner: general_pulsar_1
    max_accepted_cores: 8
    max_accepted_mem: 32
    scheduling:
      accept:
        - general
      require:
        - pulsar
