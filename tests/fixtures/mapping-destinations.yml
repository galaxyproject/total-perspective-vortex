global:
  default_inherits: default

tools:
  default:
    cores: 2
    mem: cores * 3
    params:
      nativeSpec: '--cores {cores} --mem {mem}'
    env:
      TEST_JOB_SLOTS: "{cores}"
      TEST_ENTITY_PRIORITY: "{cores}"
    scheduling:
      require: []
      prefer:
        - general
      accept:
      reject:
        - pulsar
    rules:
      - if: input_size < 2
        fail: Data size too small
  bwa:
    scheduling:
      require:
        - pulsar
  inheritance_test_tool:
    scheduling:
      accept:
        - pulsar
      require:
        - inherited
  three_core_test_tool:
    scheduling:
      require:
        - local
    rules:
      - if: input_size > 3
        id: arbitrary_3_core_assignment
        cores: 3
  custom_tool:
    scheduling:
      require:
        - custom

destinations:
  local:
    dest_max_cores: 4
    dest_max_mem: 16
    scheduling:
      accept:
        - local
      prefer:
        - general
    rules:
      - id: arbitrary_3_core_avoidance
        if: entity.cores == 3
        env:
          OK_SO_THIS_IS_MATCHING: it_is
        execute: |
          from tpv.core.entities import TryNextDestinationOrWait
          raise TryNextDestinationOrWait("Cannot run this job here at this time, may be available later, try elsewhere")
  k8s_environment:
    dest_max_cores: 16
    dest_max_mem: 64
    dest_max_gpus: 2
    env:
      DOCKER_ENABLED: "true"
      SPECIAL_FLAG: "first"
    params:
      memory_requests: "{mem}"
      k8s_walltime_limit: 10
    rules:
      - if: input_size > 10
        execute: |
          from tpv.core.entities import TryNextDestinationOrFail
          raise TryNextDestinationOrFail("job size too large for this destination")
    scheduling:
      prefer:
        - pulsar
  another_k8s_environment:
    dest_max_cores: 16
    dest_max_mem: 64
    dest_max_gpus: 2
    env:
      SPECIAL_FLAG: "second"
      TEST_ENTITY_PRIORITY: "{cores*2}"
    params:
      memory_requests: "{mem*2}"
      k8s_walltime_limit: 20
    rules:
      - if: input_size > 20
        execute: |
          from tpv.core.entities import TryNextDestinationOrFail
          raise TryNextDestinationOrFail("job size too large for this destination too")
    scheduling:
      prefer:
        - pulsar
        - highmem
  inherited_k8s_environment:
    inherits: another_k8s_environment
    dest_max_cores: 16
    dest_max_mem: 64
    dest_max_gpus: 2
    env:
      SPECIAL_FLAG: "third"
    params:
      memory_requests: "{mem*3}"
    scheduling:
      require:
        - inherited
  custom_naming:
    dest_max_cores: 16
    dest_max_mem: 64
    dest_max_gpus: 2
    env:
      SPECIAL_FLAG: "third"
    params:
      memory_requests: "{mem*3}"
      destination_name_override: 'my-dest-with-{cores}-cores-{mem}-mem'
    scheduling:
      require:
        - custom
