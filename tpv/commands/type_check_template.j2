# This file was autogenerated by TPVConfigLinter for mypy checks.
import logging
import typing
from typing import Annotated, Any, ClassVar, Dict, Iterable, List, Optional, Union

from galaxy.app import UniverseApplication
from galaxy.jobs import JobWrapper
from galaxy.model import Job, User
from galaxy.tools import Tool as GalaxyTool

from tpv.core import helpers
from tpv.core.entities import Destination, Entity, SchedulingTags
from tpv.core.mapper import EntityToDestinationMapper

log = logging.getLogger(__name__)

# --- 1. Declare global "context" variables ---
app: UniverseApplication
tool: GalaxyTool
user: Optional[User]
job: Job
job_wrapper: Optional[JobWrapper]
resource_params: Optional[Dict[str, Any]]
workflow_invocation_uuid: Optional[str]
mapper: EntityToDestinationMapper
entity: Entity

# --- 2. Declare evaluation time "context" variables ---
cores: Optional[Union[int, float, str]]
mem: Optional[Union[int, float, str]]
gpus: Optional[Union[int, float, str]]
min_cores: Optional[Union[int, float, str]]
min_mem: Optional[Union[int, float, str]]
min_gpus: Optional[Union[int, float, str]]
max_cores: Optional[Union[int, float, str]]
max_mem: Optional[Union[int, float, str]]
max_gpus: Optional[Union[int, float, str]]
max_accepted_cores: Optional[Union[int, float]]
max_accepted_mem: Optional[Union[int, float]]
max_accepted_gpus: Optional[Union[int, float]]
min_accepted_cores: Optional[Union[int, float]]
min_accepted_mem: Optional[Union[int, float]]
min_accepted_gpus: Optional[Union[int, float]]
env: Optional[List[Dict[str, str]]]
params: Optional[Dict[str, Any]]
resubmit: Optional[Dict[str, str]]
rank: Optional[str]
context: Optional[Dict[str, Any]]
handler_tags: Optional[SchedulingTags]
candidate_destinations: List[Destination]
dest_name: Optional[str]
input_size: float

# --- 3. Declare user defined "context" variables ---
{% for context_var, context_var_types in context_vars.items() -%}
{{ context_var }}: {{ context_var_types }}
{% endfor %}

# --- 4. User defined, evaluable entity fields ---
{% for block in code_blocks %}
{% if block.return_type == "None" -%}
{# No return_type, like execute or fail fields. Just insert the block -#}
def {{ block.func_name }}() -> None:
    {{ block.code|indent(4) }}
{% else -%}
def {{ block.func_name }}() -> {{ block.return_type }}:
    # add a return to the last statement in the code block
    {{ block.code|returnify|indent(4) }}
{% endif -%}
{% endfor %}
